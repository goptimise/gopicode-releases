name: Build Linux Code Server
on:
  workflow_dispatch:
    inputs:
      commit:
        description: 'Commit to build from'
        required: true
        default: 'main'
      # quality:
      #   description: 'Quality'
      #   required: true
      #   type: choice
      #   options:
      #   - insider
      #   - stable
      #   default: insider

env:
  # QUALITY: ${{ github.event.inputs.quality }}
  QUALITY: 'stable'
  RELEASE_COMMIT: ${{ github.event.inputs.commit }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.bundle_tar.outputs.version }}
      release_commit: ${{ steps.bundle_tar.outputs.release_commit }}
      quality: ${{ steps.bundle_tar.outputs.quality }}
    
    strategy:
      fail-fast: true
      matrix:
        include:
        - vscode_arch: x64
          npm_arch: x64
        # - vscode_arch: arm64
        #   npm_arch: arm64
        # - vscode_arch: armhf
        #   npm_arch: arm

    name: Build linux-${{ matrix.vscode_arch }}
    env:
      OS_NAME: 'linux'
      VSCODE_ARCH: ${{ matrix.vscode_arch }}
      NPM_REGISTRY: 'https://registry.npmjs.org'
    
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/gopicode-server
          ref: ${{ env.RELEASE_COMMIT }}
          fetch-depth: 20
          token: ${{ secrets.VSCODE_GITHUB_TOKEN }}

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Setup system services
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y pkg-config \
            dbus \
            xvfb \
            libgtk-3-0 \
            libxkbfile-dev \
            libkrb5-dev \
            libgbm1 \
            rpm
          sudo cp build/azure-pipelines/linux/xvfb.init /etc/init.d/xvfb
          sudo chmod +x /etc/init.d/xvfb
          sudo update-rc.d xvfb defaults
          sudo service xvfb start

      - name: Compute node modules cache key
        id: nodeModulesCacheKey
        run: |
          mkdir -p .build
          echo "value=$(node build/azure-pipelines/common/computeNodeModulesCacheKey.js linux ${{ matrix.vscode_arch }})" >> $GITHUB_OUTPUT

      - name: Cache node modules
        id: cacheNodeModules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-cacheNodeModulesLinux-${{ steps.nodeModulesCacheKey.outputs.value }}

      - name: Get npm cache directory path
        id: npmCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache npm directory
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.npmCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-npmCacheDir-${{ steps.nodeModulesCacheKey.outputs.value }}
          restore-keys: ${{ runner.os }}-npmCacheDir-

      - name: Get commit hash for build cache
        id: commitHash
        run: echo "value=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Cache VS Code build output
        id: cacheVSCodeBuild
        uses: actions/cache@v4
        with:
          path: |
            vscode-reh-web-linux-${{ matrix.vscode_arch }}
            vscode-reh-linux-${{ matrix.vscode_arch }}
            .build/
          key: ${{ runner.os }}-vscode-build-v2-${{ matrix.vscode_arch }}-${{ env.QUALITY }}-${{ steps.commitHash.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-vscode-build-v2-${{ matrix.vscode_arch }}-${{ env.QUALITY }}-
            ${{ runner.os }}-vscode-build-v2-${{ matrix.vscode_arch }}-

      - name: Debug cache restore
        run: |
          echo "=== Cache Debug Information ==="
          echo "Cache hit: ${{ steps.cacheVSCodeBuild.outputs.cache-hit }}"
          echo "Current commit: ${{ steps.commitHash.outputs.value }}"
          echo "Cache key used: ${{ runner.os }}-vscode-build-v2-${{ matrix.vscode_arch }}-${{ env.QUALITY }}-${{ steps.commitHash.outputs.value }}"
          echo "=== Current directory structure ==="
          ls -la
          echo "=== Looking for vscode-reh directories ==="
          find . -maxdepth 2 -name "*vscode-reh*" -type d -exec ls -la {} \; || echo "No vscode-reh directories found"
          echo "=== Looking for any packaged directories that might have been cached ==="
          find . -maxdepth 1 -name "gopicode-server-*" -type d || echo "No packaged directories found"

      - name: Check if build output exists
        id: buildExists
        run: |
          # Check for raw build outputs first
          if [ -d "vscode-reh-web-linux-${{ matrix.vscode_arch }}" ] || [ -d "vscode-reh-linux-${{ matrix.vscode_arch }}" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "✅ Raw build output found (from cache or restore-keys match)"
            echo "Found directories:"
            ls -la | grep vscode-reh || echo "No vscode-reh directories visible with ls -la"
            find . -maxdepth 2 -name "*vscode-reh*" -type d || echo "No vscode-reh directories found with find"
          # Check if we have a previously packaged directory from cache (this indicates cache pollution)
          elif [ -d "gopicode-server-"*"-linux-${{ matrix.vscode_arch }}" ]; then
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️  Found packaged directory from cache, but no raw build output - cache may be polluted"
            echo "Packaged directories found:"
            ls -la | grep gopicode-server || echo "No packaged directories visible"
            echo "Will clean and rebuild to fix cache"
            # Clean up any polluted cache directories
            rm -rf gopicode-server-*-linux-${{ matrix.vscode_arch }}
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ No build output found, will build from scratch"
            echo "Current directory contents:"
            ls -la
            echo "Looking for any vscode-reh directories:"
            find . -maxdepth 3 -name "*vscode-reh*" -type d || echo "No vscode-reh directories found"
          fi

      - name: Install dependencies
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
          npm_config_arch: ${{ matrix.npm_arch }}
        run: |
          set -e
          npm config set registry "$NPM_REGISTRY"
          
          cd ./build
          npm ci
          cd ..
          
          # Skip setup-env.sh to avoid sysroot issues when building on same architecture
          # source ./build/azure-pipelines/linux/setup-env.sh
          npm ci

      - name: Clean workspace before build
        if: ${{ steps.buildExists.outputs.exists != 'true' }}
        run: |
          echo "🧹 Cleaning workspace before build"
          # Remove any packaged directories from previous runs or cache pollution
          rm -rf gopicode-server-*-linux-${{ matrix.vscode_arch }}
          echo "Cleaned workspace. Current state:"
          ls -la | grep -E "(vscode-reh|gopicode-server)" || echo "No build/package directories found"

      # Alternative Docker-based approach (uncomment if above fails):
      # - name: Install dependencies (Docker)
      #   if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
      #   env:
      #     PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      #     ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      #     npm_config_arch: ${{ matrix.npm_arch }}
      #     VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME: gitpod/openvscode-server-linux-build-agent:centos7-devtoolset8-x64
      #     VSCODE_HOST_MOUNT: ${{ github.workspace }}
      #   run: |
      #     set -e
      #     npm config set registry "$NPM_REGISTRY"
      #     
      #     cd ./build
      #     npm ci
      #     cd ..
      #     
      #     docker run -e npm_config_arch -e NPM_REGISTRY \
      #       -e VSCODE_REMOTE_DEPENDENCIES_CONTAINER_NAME -e VSCODE_HOST_MOUNT \
      #       -e ELECTRON_SKIP_BINARY_DOWNLOAD -e PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD \
      #       -v $GITHUB_WORKSPACE:/home/builduser/workspace \
      #       -w /home/builduser/workspace gitpod/openvscode-server-linux-build-agent:bionic-x64 \
      #       /bin/bash -c "npm ci"

      # - name: Update product.json
      #   if: ${{ steps.buildExists.outputs.exists != 'true' }}
      #   run: |
      #     set -e
      #     nameShort=$(jq --raw-output '.nameShort' product.json)
      #     nameLong=$(jq --raw-output '.nameLong' product.json)
      #     # if [ "$QUALITY" = "insider" ]; then
      #     #   nameShort="$nameShort - Insiders"
      #     #   nameLong="$nameLong - Insiders"
      #     # fi
      #     setQuality="setpath([\"quality\"]; \"$QUALITY\")"
      #     setNameShort="setpath([\"nameShort\"]; \"$nameShort\")"
      #     setNameLong="setpath([\"nameLong\"]; \"$nameLong\")"
      #     jqCommands="${setQuality} | ${setNameShort} | ${setNameLong}"
      #     cat product.json | jq "${jqCommands}" > product.json.tmp
      #     mv product.json.tmp product.json

      - name: Build Code Server
        if: ${{ steps.buildExists.outputs.exists != 'true' }}
        run: |
          set -e
          npm run gulp vscode-reh-web-linux-${{ matrix.vscode_arch }}-min
        env:
          DISABLE_V8_COMPILE_CACHE: 1

      - name: Debug build output
        if: ${{ steps.buildExists.outputs.exists != 'true' }}
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo "=== Looking for vscode-reh directories ==="
          find . -name "*vscode-reh*" -type d
          echo "=== Looking for any linux build outputs ==="
          find . -name "*linux*" -type d

      - name: Save build to cache (prevent cache pollution)
        if: ${{ steps.buildExists.outputs.exists != 'true' && steps.cacheVSCodeBuild.outputs.cache-hit != 'true' }}
        run: |
          echo "✅ Build completed successfully. Cache will be saved automatically."
          echo "Raw build directories that will be cached:"
          find . -maxdepth 1 -name "*vscode-reh*" -type d || echo "No vscode-reh directories found"

      - name: Show cache status and debug (when cache hit)
        if: ${{ steps.buildExists.outputs.exists == 'true' }}
        run: |
          echo "✅ VS Code build was found! Skipped 35+ min build."
          echo "Cache status: cache-hit=${{ steps.cacheVSCodeBuild.outputs.cache-hit }}"
          echo "=== Build directories found ==="
          find . -name "*vscode-reh*" -type d

      - name: Package Code Server
        id: bundle_tar
        run: |
          set -e
          
          # Extract version with better error handling
          if [ -f "package.json" ]; then
            version=$(node -p "require('./package.json').version" 2>/dev/null || echo "unknown")
            echo "Version extracted from package.json: ${version}"
          else
            echo "package.json not found, using fallback version"
            version="unknown"
          fi
          
          release_commit=$(git rev-parse "${RELEASE_COMMIT}")
          name="gopicode-server-v${version}-linux-${{ matrix.vscode_arch }}"
          
          echo "Packaging with version: ${version}"
          echo "Package name will be: ${name}"
          echo "Release commit: ${release_commit}"
          echo "Quality: ${QUALITY}"
          
          # Check for different possible output directory names
          if [ -d "vscode-reh-web-linux-${{ matrix.vscode_arch }}" ]; then
            output_dir="vscode-reh-web-linux-${{ matrix.vscode_arch }}"
          elif [ -d "../vscode-reh-web-linux-${{ matrix.vscode_arch }}" ]; then
            output_dir="../vscode-reh-web-linux-${{ matrix.vscode_arch }}"
          elif [ -d "vscode-reh-linux-${{ matrix.vscode_arch }}" ]; then
            output_dir="vscode-reh-linux-${{ matrix.vscode_arch }}"
          else
            echo "Error: Could not find build output directory"
            echo "Available directories:"
            find . -name "*vscode*" -type d
            exit 1
          fi
          
          echo "Using output directory: $output_dir"
          # Copy instead of move to preserve cache for next time
          cp -r "$output_dir" ${name}
          tar -czf ${name}.tar.gz ${name}
          
          # Verify the created file
          echo "Created archive: ${name}.tar.gz"
          ls -la ${name}.tar.gz
          
          echo "release_commit=${release_commit}" >> $GITHUB_OUTPUT
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "quality=${QUALITY}" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.vscode_arch }}
          path: gopicode-server-*.tar.gz

      - name: Show build status
        run: |
          if [ "${{ steps.buildExists.outputs.exists }}" == "true" ]; then
            if [ "${{ steps.cacheVSCodeBuild.outputs.cache-hit }}" == "true" ]; then
              echo "✅ Used exact cache match - super fast!"
            else
              echo "✅ Used cached build from similar commit - still fast!"
            fi
          else
            echo "🔨 VS Code was built from scratch. Next run will be cached."
          fi

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Display downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts/ -name "*.tar.gz" -exec ls -la {} \;

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: gopicode-server-v${{ needs.build.outputs.version }}
          name: GopiCode Server v${{ needs.build.outputs.version }}
          body: |
            Linux Code Server build for commit ${{ needs.build.outputs.release_commit }}
            Quality: ${{ needs.build.outputs.quality }}
            
            ## Download Links
            - Linux x64: [gopicode-server-v${{ needs.build.outputs.version }}-linux-x64.tar.gz](https://github.com/${{ github.repository }}/releases/download/gopicode-server-v${{ needs.build.outputs.version }}/gopicode-server-v${{ needs.build.outputs.version }}-linux-x64.tar.gz)
          files: artifacts/**/gopicode-server-*.tar.gz
          draft: false
          # prerelease: ${{ needs.build.outputs.quality == 'insider' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 